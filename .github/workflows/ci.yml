name: Go CI More actions

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  Build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true  # Enable automatic caching

      - name: Install dependencies
        run: go mod tidy

      - name: Build the application
        run: go build -v ./...

  Test:
    name: Test
    runs-on: ubuntu-latest
    needs: Build

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      valkey:
        image: valkey/valkey:7.2
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # PostgreSQL ENV
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: testdb
      POST_HOST: localhost
      POST_PORT: 5432

      # Valkey ENV
      VALKEY_HOST: localhost
      VALKEY_PORT: 6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'
          cache: true  # Enable automatic caching

      - name: Install dependencies
        run: go mod tidy

      - name: Wait for services to be ready
        run: |
          for i in {1..10}; do
            nc -z localhost 5432 && nc -z localhost 6379 && break
            sleep 5
          done

      - name: Run tests
        run: go test -v ./tests/... -coverprofile=coverage.out -coverpkg=./internl/...

      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          file: coverage.out
          token: ${{ secrets.CODECOV_TOKEN }}

  Publish-Docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: Test
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'release' && github.event.action == 'published')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for proper tag detection

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: moukhtar/url_shortner_backend
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
